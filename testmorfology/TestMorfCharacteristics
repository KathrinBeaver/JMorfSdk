package testmorfology;

import jmorfsdk.grammeme.MorfologyCharacteristics;
import jmorfsdk.grammeme.MorfologyParameters.*;
import jmorfsdk.grammeme.MorfologyParameters;

public class TestMorfCharacteristics {

    private enum ErrorTest {
        ERRORTEST
    }

    public static void addOthersCharacteristics_addEnum(Enum testEnum) throws Exception {

        MorfologyCharacteristics morfChar = new MorfologyCharacteristics();
        boolean isCoincided;

        morfChar.addMorfCharacteristics(testEnum);

        switch (testEnum.getDeclaringClass().getSimpleName()) {
            case "ANim":
                isCoincided = morfChar.getOdush() == testEnum;
                break;
            case "GNdr":
                isCoincided = morfChar.getRod() == testEnum;
                break;
            case "NMbr":
                isCoincided = morfChar.getNMbr() == testEnum;
                break;
            case "CAse":
                isCoincided = morfChar.getCAse() == testEnum;
                break;
            case "ASpc":
                isCoincided = morfChar.getASpc() == testEnum;
                break;
            case "TRns":
                isCoincided = morfChar.getTRns() == testEnum;
                break;
            case "PErs":
                isCoincided = morfChar.getPErs() == testEnum;
                break;
            case "TEns":
                isCoincided = morfChar.getTEns() == testEnum;
                break;
            case "MOod":
                isCoincided = morfChar.getMOod() == testEnum;
                break;
            case "INvl":
                isCoincided = morfChar.getINvl() == testEnum;
                break;
            case "VOic":
                isCoincided = morfChar.getVOic() == testEnum;
                break;
            default:
                if (testEnum.equals(ErrorTest.ERRORTEST)) {
                    isCoincided = !morfChar.getOthers(testEnum.name());
                } else {
                    isCoincided = morfChar.getOthers(testEnum.name());
                }
        }

        if (isCoincided) {
            System.out.println("Test MorfologyCharacteristics 'addOthersCharacteristics_add" + testEnum.getDeclaringClass().getSimpleName() + testEnum.name() + "' successful!");
        } else {
            throw new Exception();
        }
    }

    public static void addOthersCharacteristics_addEnum() throws Exception {

        for (ANim en : ANim.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (GNdr en : GNdr.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (NMbr en : NMbr.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (CAse en : CAse.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (ASpc en : ASpc.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (TRns en : TRns.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (PErs en : PErs.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (TEns en : TEns.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (MOod en : MOod.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (INvl en : INvl.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        for (VOic en : VOic.values()) {
            addOthersCharacteristics_addEnum(en);
        }
        for (Others en : Others.values()) {
            addOthersCharacteristics_addEnum(en);
        }

        addOthersCharacteristics_addEnum(ErrorTest.ERRORTEST);
    }

    public static void getEnum_getEnum(Enum testEnum) throws Exception {

        String strTestEnum = testEnum.name();

        if (strTestEnum.equals("INDETERMINATELY") || MorfologyParameters.getEnum(strTestEnum).equals(testEnum)) {
            System.out.println("Test MorfologyCharacteristics 'getEnum_getEnum" + testEnum.getDeclaringClass().getSimpleName() + testEnum.name() + "' successful!");
        } else {
            System.err.println(testEnum);
            throw new Exception();
        }
    }

    public static void getEnum_getEnum() throws Exception {

        for (ANim en : ANim.values()) {
            getEnum_getEnum(en);
        }

        for (GNdr en : GNdr.values()) {
            getEnum_getEnum(en);
        }

        for (NMbr en : NMbr.values()) {
            getEnum_getEnum(en);
        }

        for (CAse en : CAse.values()) {
            getEnum_getEnum(en);
        }

        for (ASpc en : ASpc.values()) {
            getEnum_getEnum(en);
        }

        for (TRns en : TRns.values()) {
            getEnum_getEnum(en);
        }

        for (PErs en : PErs.values()) {
            getEnum_getEnum(en);
        }

        for (TEns en : TEns.values()) {
            getEnum_getEnum(en);
        }

        for (MOod en : MOod.values()) {
            getEnum_getEnum(en);
        }

        for (INvl en : INvl.values()) {
            getEnum_getEnum(en);
        }

        for (VOic en : VOic.values()) {
            getEnum_getEnum(en);
        }
        for (Others en : Others.values()) {
            getEnum_getEnum(en);
        }

        addOthersCharacteristics_addEnum(ErrorTest.ERRORTEST);
    }

    public static void main(String[] args) {

        try {
            //addOthersCharacteristics_addEnum();
            getEnum_getEnum();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
